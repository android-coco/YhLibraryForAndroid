/* * Copyright (c) 2015, 张涛. * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.yh.library;import android.app.Activity;import android.os.Bundle;import android.os.Handler;import android.support.v4.app.ActivityCompat;import android.support.v4.app.Fragment;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import org.yh.library.okhttp.OkHttpRequestManager;import org.yh.library.ui.AnnotateUtil;import org.yh.library.ui.YHViewInject;import java.lang.ref.SoftReference;import static org.yh.library.utils.SystemUtils.isGranted;/** * 兼容v4包的Fragment * * @author yh (https://github.com/android-coco) . */@SuppressWarnings("all")public abstract class YHFragment extends Fragment implements        OnClickListener{    public static final int WHICH_MSG = 0X37211;    protected final String TAG = this.getClass().getSimpleName();    protected View fragmentRootView;    protected Activity aty;    private ThreadDataCallBack callback;    private YHFragmentHandle threadHandle = new YHFragmentHandle(this);    /**     * 一个私有回调类，线程中初始化数据完成后的回调     */    private interface ThreadDataCallBack    {        void onSuccess();    }    private static class YHFragmentHandle extends Handler    {        private final SoftReference<YHFragment> mOuterInstance;        YHFragmentHandle(YHFragment outer)        {            mOuterInstance = new SoftReference<>(outer);        }        // 当线程中初始化的数据初始化完成后，调用回调方法        @Override        public void handleMessage(android.os.Message msg)        {            YHFragment fragment = mOuterInstance.get();            if (msg.what == WHICH_MSG && fragment != null)            {                fragment.callback.onSuccess();            }        }    }    protected abstract View inflaterView(LayoutInflater inflater,                                         ViewGroup container, Bundle bundle);    /**     * initialization widget, you should look like parentView.findviewbyid(id);     * call method     *     * @param parentView     */    protected void initWidget(View parentView)    {    }    /**     * initialization data     */    protected void initData()    {    }    /**     * initialization data. And this method run in background thread, so you     * shouldn't change ui<br>     * on initializated, will call threadDataInited();     */    protected void initDataFromThread()    {        callback = new ThreadDataCallBack()        {            @Override            public void onSuccess()            {                threadDataInited();            }        };    }    /**     * 如果调用了initDataFromThread()，则当数据初始化完成后将回调该方法。     */    protected void threadDataInited()    {    }    /**     * 当通过changeFragment()显示时会被调用(类似于onResume,重新显示)     */    public void onChange()    {    }    /**     * widget click method     */    protected void widgetClick(View v)    {    }    @Override    public void onClick(View v)    {        widgetClick(v);    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState)    {        aty = getActivity();        fragmentRootView = inflaterView(inflater, container, savedInstanceState);        AnnotateUtil.initBindView(this, fragmentRootView);        initData();        initWidget(fragmentRootView);        new Thread(new Runnable()        {            @Override            public void run()            {                initDataFromThread();                threadHandle.sendEmptyMessage(WHICH_MSG);            }        }).start();        return fragmentRootView;    }    //申请权限    protected void requestPermission(String permission, int requestCode)    {        if (!isGranted(getContext(), permission))        {            //主要用于给用户一个申请权限的解释，该方法只有在用户在上一次已经拒绝过你的这个权限申请。            // 也就是说，用户已经拒绝一次了，            // 你又弹个授权框，你需要给用户一个解释，为什么要授权，则使用该方法。            if (ActivityCompat.shouldShowRequestPermissionRationale(aty, permission))            {                ActivityCompat.requestPermissions(aty, new String[]{permission}, requestCode);            }        } else        {            //直接执行相应操作了            requestPermissionSuccess();        }    }    /**     * 权限用户授权后回调     */    public void requestPermissionSuccess()    {    }    @Override    public void onDestroyView()    {        super.onDestroyView();        callback = null;        threadHandle = null;        aty = null;        OkHttpRequestManager.cancel(TAG);//取消网络请求        YHViewInject.create().disMisTip();    }    protected <T extends View> T bindView(int id)    {        return (T) fragmentRootView.findViewById(id);    }    protected <T extends View> T bindView(int id, boolean click)    {        T view = (T) fragmentRootView.findViewById(id);        if (click)        {            view.setOnClickListener(this);        }        return view;    }}